spring.application.name=service-consumer
server.port=80
eureka.client.serviceUrl.defaultZone=http://localhost:1017/eureka/
##ribbon负载均衡策略配置
##随机 随机选择Server
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
##轮询 按顺序循环选择Server
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule
##重试 在一个配置时问段内当选择Server不成功，则一直尝试选择一个可用的Server
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RetryRule
##最低并发策略 逐个考察Server，如果Server断路器打开，则忽略，再选择其中并发连接最低的Server
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.BestAvailableRule
##可用过滤策略 过滤掉一直连接失败并被标记为 circuit tripped 的 Server，过滤掉那些高并发连接的 Server（active connections 超过配置的网值）
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.AvailabilityFilteringRule
##响应时间加权策略 根据 Server 的响应时间分配权重。响应时间越长，权重越低，被选择到的概率就越低；响应时间越短，权重越高，被选择到的概率就越高。这个策略很贴切，综合了各种因素，如：网络、磁盘、IO等，这些因素直接影响着响应时间
service-provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.ResponseTimeWeightedRule
##区域权衡策略 综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，并且判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server
##ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.ZoneAvoidanceRule
# 请求连接的超时时间 默认的时间为 1 秒
ribbon.ConnectTimeout=5000
# 请求处理的超时时间
ribbon.ReadTimeout=5000

logging.level.com.example.consumer.service.SayHelloService=debug
#开启hystrix
feign.hystrix.enabled=true
#hystrix超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=5
management.endpoints.web.exposure.include=*
